---

- name: Ensure hostname format
  hostname:
    name: "{{ inventory_hostname }}"
  when: not inventory_hostname is match('(\d{1,3}\.){3}\d{1,3}')
  register: hostname
  tags: hostname

- name: Ensure hostname is in /etc/hosts
  lineinfile:
    dest: /etc/hosts
    regexp: "^{{ ansible_default_ipv4.address }}.+$"
    line: "{{ ansible_default_ipv4.address }} {{ ansible_fqdn }} {{ ansible_hostname }}"
  register: hostname
  tags: hostname

- name: Set timezone to UTC
  timezone:
    name: UTC
  register: timezone

# - name: gpu mem check
#   shell: cat /boot/config.txt | grep gpu_mem
#   changed_when: false
#   register: gpu_mem_check

# - name: reduce gpu memory
#   lineinfile:
#     path: /boot/config.txt
#     line: gpu_mem=16
#   register: gpu_mem
#   when: gpu_mem_check.stdout == ""

- name: Enabling cgroup options at boot
  copy:
    src: cmdline.txt
    dest: /boot/cmdline.txt
    owner: root
    group: root
    mode: 0755
  register: cmdline
  tags:
    - boot

# https://romainpellerin.eu/raspberry-pi-the-ultimate-guide.html
# https://gist.github.com/alexellis/fdbc90de7691a1b9edb545c17da2d975
- name: Disable permanently SWAP
  shell: swapoff --all && update-rc.d dphys-swapfile remove && apt remove dphys-swapfile -y && rm /var/swap -f
  become: True

- name: Update apt packages
  apt:
    update_cache: yes
    autoclean: yes
    autoremove: yes
    cache_valid_time: 86400

- name: Upgrade apt packages
  apt:
    upgrade: full

- name: Install python-apt package
  shell: apt install -y python-apt
  args:
    warn: no

# Docker Convenience Script Can Only Be Run Once
- name: Determine if docker is installed
  stat:
    path: /usr/bin/docker
  register: docker_there
  ignore_errors: True

# https://docs.docker.com/engine/installation/linux/docker-ce/debian/#install-using-the-convenience-script
- name: Run Docker Install Script
  script: files/get-docker.sh
  when: docker_there.stat.exists == False
  register: docker_installed

- name: Lock last stable docker version
  command: /usr/bin/apt-mark hold docker-ce
  when: docker_installed.changed

- name: Add pi to docker group
  shell: usermod -aG docker pi
  become: yes

- name: Copy docker daemon file
  copy:
    src: daemon.json
    dest: /etc/docker/daemon.json
    owner: pi
    group: docker
    mode: u=rw,g=rw,o=rw

- name: Pass bridged IPv4 traffic to iptables chains
  sysctl:
    #name: net.bridge.bridge-nf-call-iptables
    name: net.ipv4.ip_forward
    value: '1'
    state: present

# https://kubernetes.io/docs/setup/independent/install-kubeadm/
- name: Install apt-transport-https
  apt:
    name: apt-transport-https
    state: latest

- name: Add Google Cloud Repo Key
  shell: curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -
  args:
    warn: no

- name: Add Kubernetes to available apt sources
  file:
    src: kubernetes.list
    dest: /etc/apt/sources.list.d/kubernetes.list
    owner: pi
    group: root
    mode: u=rw,g=rw,o=rw

- name: Install version {{ kubernetes_package_version }} of kubelet, kubeadm and kubectl
  apt:
    name:
        - "kubelet={{ kubernetes_package_version }}"
        - "kubeadm={{ kubernetes_package_version }}"
        - "kubectl={{ kubernetes_package_version }}"
    state: present
    force: yes

- name: Reboot Raspberry Pis
  shell: sleep 2 && reboot "Ansible Reboot"
  async: 1
  poll: 0
  ignore_errors: True
  when: cmdline or timezone or hostname is changed

- name: Wait for reboot
  wait_for_connection:
    delay: 30
    timeout: 120